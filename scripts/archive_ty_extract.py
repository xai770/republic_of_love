#!/usr/bin/env python3
"""
Archive Legacy TY_EXTRACT Implementations
==========================================

Clean up workspace by archiving all ty_extract implementations except ty_extract_DEV
which is the current running implementation.

Author: Arden
Date: 2025-07-20
"""

import shutil
import os
from pathlib import Path
from datetime import datetime

def archive_ty_extract_implementations():
    """Archive legacy ty_extract implementations"""
    
    workspace_root = Path("/home/xai/Documents/republic_of_love")
    archive_dir = workspace_root / "archive" / f"ty_extract_archive_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    archive_dir.mkdir(parents=True, exist_ok=True)
    
    print(f"üóÑÔ∏è Creating archive directory: {archive_dir}")
    
    # Items to archive (keep ty_extract_DEV as it's the current implementation)
    items_to_archive = [
        "ty_extract",  # This is a symlink
    ]
    
    # Check for other ty_extract directories
    for item in workspace_root.iterdir():
        if item.name.startswith("ty_extract") and item.name != "ty_extract_DEV":
            if item.name not in items_to_archive:
                items_to_archive.append(item.name)
    
    print(f"üì¶ Items to archive: {items_to_archive}")
    print(f"‚úÖ Keeping: ty_extract_DEV (current implementation)")
    
    # Archive each item
    for item_name in items_to_archive:
        item_path = workspace_root / item_name
        if item_path.exists():
            target_path = archive_dir / item_name
            
            if item_path.is_symlink():
                print(f"üîó Archiving symlink: {item_name}")
                # Copy the symlink itself
                target_path.symlink_to(item_path.readlink())
                item_path.unlink()  # Remove original symlink
            elif item_path.is_dir():
                print(f"üìÅ Archiving directory: {item_name}")
                shutil.move(str(item_path), str(target_path))
            else:
                print(f"üìÑ Archiving file: {item_name}")
                shutil.move(str(item_path), str(target_path))
        else:
            print(f"‚ö†Ô∏è Item not found: {item_name}")
    
    # Create archive manifest
    manifest_content = f"""# TY_EXTRACT Archive Manifest

**Archive Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**Archive Directory:** {archive_dir}  
**Reason:** Cleanup before LLM optimization experiments  

## Archived Items:
{chr(10).join(f"- {item}" for item in items_to_archive)}

## Current Implementation:
- **ty_extract_DEV** - Active implementation (not archived)

## Notes:
- ty_extract_DEV contains the exact running implementation
- Use ty_extract_DEV for all LLM optimization experiments
- Archived items can be restored if needed

---
*Generated by archive_ty_extract.py*
"""
    
    manifest_file = archive_dir / "ARCHIVE_MANIFEST.md"
    with open(manifest_file, 'w', encoding='utf-8') as f:
        f.write(manifest_content)
    
    print(f"üìã Archive manifest created: {manifest_file}")
    print(f"‚úÖ Archive complete! {len(items_to_archive)} items archived.")
    print(f"üéØ ty_extract_DEV is ready for LLM optimization experiments")
    
    return archive_dir

if __name__ == "__main__":
    print("üöÄ TY_EXTRACT Archive Utility")
    print("=" * 50)
    
    archive_path = archive_ty_extract_implementations()
    
    print("\\n" + "=" * 50)
    print(f"üéâ Archive complete: {archive_path}")
    print("üî¨ Ready for LLM optimization experiments!")
